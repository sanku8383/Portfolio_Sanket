{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { useFormControl } from '../FormControl';\nimport Typography from '../Typography';\nimport capitalize from '../utils/capitalize';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport formControlLabelClasses, { getFormControlLabelUtilityClasses } from './formControlLabelClasses';\nimport formControlState from '../FormControl/formControlState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disabled,\n    labelPlacement,\n    error,\n    required\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', `labelPlacement${capitalize(labelPlacement)}`, error && 'error', required && 'required'],\n    label: ['label', disabled && 'disabled'],\n    asterisk: ['asterisk', error && 'error']\n  };\n  return composeClasses(slots, getFormControlLabelUtilityClasses, classes);\n};\n\nexport const FormControlLabelRoot = styled('label', {\n  name: 'MuiFormControlLabel',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${formControlLabelClasses.label}`]: styles.label\n    }, styles.root, styles[`labelPlacement${capitalize(ownerState.labelPlacement)}`]];\n  }\n})(_ref2 => {\n  let {\n    theme,\n    ownerState\n  } = _ref2;\n  return {\n    display: 'inline-flex',\n    alignItems: 'center',\n    cursor: 'pointer',\n    // For correct alignment with the text.\n    verticalAlign: 'middle',\n    WebkitTapHighlightColor: 'transparent',\n    marginLeft: -11,\n    marginRight: 16,\n    // used for row presentation of radio/checkbox\n    [`&.${formControlLabelClasses.disabled}`]: {\n      cursor: 'default'\n    },\n    ...(ownerState.labelPlacement === 'start' && {\n      flexDirection: 'row-reverse',\n      marginLeft: 16,\n      // used for row presentation of radio/checkbox\n      marginRight: -11\n    }),\n    ...(ownerState.labelPlacement === 'top' && {\n      flexDirection: 'column-reverse',\n      marginLeft: 16\n    }),\n    ...(ownerState.labelPlacement === 'bottom' && {\n      flexDirection: 'column',\n      marginLeft: 16\n    }),\n    [`& .${formControlLabelClasses.label}`]: {\n      [`&.${formControlLabelClasses.disabled}`]: {\n        color: (theme.vars || theme).palette.text.disabled\n      }\n    }\n  };\n});\nconst AsteriskComponent = styled('span', {\n  name: 'MuiFormControlLabel',\n  slot: 'Asterisk',\n  overridesResolver: (props, styles) => styles.asterisk\n})(_ref3 => {\n  let {\n    theme\n  } = _ref3;\n  return {\n    [`&.${formControlLabelClasses.error}`]: {\n      color: (theme.vars || theme).palette.error.main\n    }\n  };\n});\n/**\n * Drop-in replacement of the `Radio`, `Switch` and `Checkbox` component.\n * Use this component if you want to display an extra label.\n */\n\nconst FormControlLabel = /*#__PURE__*/React.forwardRef(function FormControlLabel(inProps, ref) {\n  var _ref, _slotProps$typography;\n\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiFormControlLabel'\n  });\n  const {\n    checked,\n    className,\n    componentsProps = {},\n    control,\n    disabled: disabledProp,\n    disableTypography,\n    inputRef,\n    label: labelProp,\n    labelPlacement = 'end',\n    name,\n    onChange,\n    required: requiredProp,\n    slotProps = {},\n    value,\n    ...other\n  } = props;\n  const muiFormControl = useFormControl();\n  const disabled = (_ref = disabledProp != null ? disabledProp : control.props.disabled) != null ? _ref : muiFormControl == null ? void 0 : muiFormControl.disabled;\n  const required = requiredProp != null ? requiredProp : control.props.required;\n  const controlProps = {\n    disabled,\n    required\n  };\n  ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(key => {\n    if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {\n      controlProps[key] = props[key];\n    }\n  });\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['error']\n  });\n  const ownerState = { ...props,\n    disabled,\n    labelPlacement,\n    required,\n    error: fcs.error\n  };\n  const classes = useUtilityClasses(ownerState);\n  const typographySlotProps = (_slotProps$typography = slotProps.typography) != null ? _slotProps$typography : componentsProps.typography;\n  let label = labelProp;\n\n  if (label != null && label.type !== Typography && !disableTypography) {\n    label = /*#__PURE__*/_jsx(Typography, {\n      component: \"span\",\n      ...typographySlotProps,\n      className: clsx(classes.label, typographySlotProps == null ? void 0 : typographySlotProps.className),\n      children: label\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(FormControlLabelRoot, {\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref,\n    ...other,\n    children: [/*#__PURE__*/React.cloneElement(control, controlProps), label, required && /*#__PURE__*/_jsxs(AsteriskComponent, {\n      ownerState: ownerState,\n      \"aria-hidden\": true,\n      className: classes.asterisk,\n      children: [\"\\u2009\", '*']\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? FormControlLabel.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component appears selected.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    typography: PropTypes.object\n  }),\n\n  /**\n   * A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.\n   */\n  control: PropTypes.element.isRequired,\n\n  /**\n   * If `true`, the control is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label is rendered as it is passed without an additional typography node.\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * A text or an element to be used in an enclosing label element.\n   */\n  label: PropTypes.node,\n\n  /**\n   * The position of the label.\n   * @default 'end'\n   */\n  labelPlacement: PropTypes.oneOf(['bottom', 'end', 'start', 'top']),\n\n  /**\n   * @ignore\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the label will indicate that the `input` is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    typography: PropTypes.object\n  }),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The value of the component.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default FormControlLabel;","map":{"version":3,"sources":["C:/React/Portfolio/Portfolio-Youtube/node_modules/@mui/material/FormControlLabel/FormControlLabel.js"],"names":["React","PropTypes","clsx","refType","unstable_composeClasses","composeClasses","useFormControl","Typography","capitalize","styled","useThemeProps","formControlLabelClasses","getFormControlLabelUtilityClasses","formControlState","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","classes","disabled","labelPlacement","error","required","slots","root","label","asterisk","FormControlLabelRoot","name","slot","overridesResolver","props","styles","theme","display","alignItems","cursor","verticalAlign","WebkitTapHighlightColor","marginLeft","marginRight","flexDirection","color","vars","palette","text","AsteriskComponent","main","FormControlLabel","forwardRef","inProps","ref","_ref","_slotProps$typography","checked","className","componentsProps","control","disabledProp","disableTypography","inputRef","labelProp","onChange","requiredProp","slotProps","value","other","muiFormControl","controlProps","forEach","key","fcs","states","typographySlotProps","typography","type","component","children","cloneElement","process","env","NODE_ENV","propTypes","bool","object","string","shape","element","isRequired","node","oneOf","func","sx","oneOfType","arrayOf","any"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { useFormControl } from '../FormControl';\nimport Typography from '../Typography';\nimport capitalize from '../utils/capitalize';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport formControlLabelClasses, { getFormControlLabelUtilityClasses } from './formControlLabelClasses';\nimport formControlState from '../FormControl/formControlState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disabled,\n    labelPlacement,\n    error,\n    required\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', `labelPlacement${capitalize(labelPlacement)}`, error && 'error', required && 'required'],\n    label: ['label', disabled && 'disabled'],\n    asterisk: ['asterisk', error && 'error']\n  };\n  return composeClasses(slots, getFormControlLabelUtilityClasses, classes);\n};\nexport const FormControlLabelRoot = styled('label', {\n  name: 'MuiFormControlLabel',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${formControlLabelClasses.label}`]: styles.label\n    }, styles.root, styles[`labelPlacement${capitalize(ownerState.labelPlacement)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => ({\n  display: 'inline-flex',\n  alignItems: 'center',\n  cursor: 'pointer',\n  // For correct alignment with the text.\n  verticalAlign: 'middle',\n  WebkitTapHighlightColor: 'transparent',\n  marginLeft: -11,\n  marginRight: 16,\n  // used for row presentation of radio/checkbox\n  [`&.${formControlLabelClasses.disabled}`]: {\n    cursor: 'default'\n  },\n  ...(ownerState.labelPlacement === 'start' && {\n    flexDirection: 'row-reverse',\n    marginLeft: 16,\n    // used for row presentation of radio/checkbox\n    marginRight: -11\n  }),\n  ...(ownerState.labelPlacement === 'top' && {\n    flexDirection: 'column-reverse',\n    marginLeft: 16\n  }),\n  ...(ownerState.labelPlacement === 'bottom' && {\n    flexDirection: 'column',\n    marginLeft: 16\n  }),\n  [`& .${formControlLabelClasses.label}`]: {\n    [`&.${formControlLabelClasses.disabled}`]: {\n      color: (theme.vars || theme).palette.text.disabled\n    }\n  }\n}));\nconst AsteriskComponent = styled('span', {\n  name: 'MuiFormControlLabel',\n  slot: 'Asterisk',\n  overridesResolver: (props, styles) => styles.asterisk\n})(({\n  theme\n}) => ({\n  [`&.${formControlLabelClasses.error}`]: {\n    color: (theme.vars || theme).palette.error.main\n  }\n}));\n\n/**\n * Drop-in replacement of the `Radio`, `Switch` and `Checkbox` component.\n * Use this component if you want to display an extra label.\n */\nconst FormControlLabel = /*#__PURE__*/React.forwardRef(function FormControlLabel(inProps, ref) {\n  var _ref, _slotProps$typography;\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiFormControlLabel'\n  });\n  const {\n    checked,\n    className,\n    componentsProps = {},\n    control,\n    disabled: disabledProp,\n    disableTypography,\n    inputRef,\n    label: labelProp,\n    labelPlacement = 'end',\n    name,\n    onChange,\n    required: requiredProp,\n    slotProps = {},\n    value,\n    ...other\n  } = props;\n  const muiFormControl = useFormControl();\n  const disabled = (_ref = disabledProp != null ? disabledProp : control.props.disabled) != null ? _ref : muiFormControl == null ? void 0 : muiFormControl.disabled;\n  const required = requiredProp != null ? requiredProp : control.props.required;\n  const controlProps = {\n    disabled,\n    required\n  };\n  ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(key => {\n    if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {\n      controlProps[key] = props[key];\n    }\n  });\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['error']\n  });\n  const ownerState = {\n    ...props,\n    disabled,\n    labelPlacement,\n    required,\n    error: fcs.error\n  };\n  const classes = useUtilityClasses(ownerState);\n  const typographySlotProps = (_slotProps$typography = slotProps.typography) != null ? _slotProps$typography : componentsProps.typography;\n  let label = labelProp;\n  if (label != null && label.type !== Typography && !disableTypography) {\n    label = /*#__PURE__*/_jsx(Typography, {\n      component: \"span\",\n      ...typographySlotProps,\n      className: clsx(classes.label, typographySlotProps == null ? void 0 : typographySlotProps.className),\n      children: label\n    });\n  }\n  return /*#__PURE__*/_jsxs(FormControlLabelRoot, {\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref,\n    ...other,\n    children: [/*#__PURE__*/React.cloneElement(control, controlProps), label, required && /*#__PURE__*/_jsxs(AsteriskComponent, {\n      ownerState: ownerState,\n      \"aria-hidden\": true,\n      className: classes.asterisk,\n      children: [\"\\u2009\", '*']\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? FormControlLabel.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the component appears selected.\n   */\n  checked: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    typography: PropTypes.object\n  }),\n  /**\n   * A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.\n   */\n  control: PropTypes.element.isRequired,\n  /**\n   * If `true`, the control is disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the label is rendered as it is passed without an additional typography node.\n   */\n  disableTypography: PropTypes.bool,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * A text or an element to be used in an enclosing label element.\n   */\n  label: PropTypes.node,\n  /**\n   * The position of the label.\n   * @default 'end'\n   */\n  labelPlacement: PropTypes.oneOf(['bottom', 'end', 'start', 'top']),\n  /**\n   * @ignore\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the label will indicate that the `input` is required.\n   */\n  required: PropTypes.bool,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    typography: PropTypes.object\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the component.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default FormControlLabel;"]},"metadata":{},"sourceType":"module"}