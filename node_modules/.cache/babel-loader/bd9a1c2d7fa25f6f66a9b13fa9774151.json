{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport composeClasses from '../composeClasses';\nimport useSwitch from '../useSwitch';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { getSwitchUtilityClass } from './switchClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    checked,\n    disabled,\n    focusVisible,\n    readOnly\n  } = ownerState;\n  const slots = {\n    root: ['root', checked && 'checked', disabled && 'disabled', focusVisible && 'focusVisible', readOnly && 'readOnly'],\n    thumb: ['thumb'],\n    input: ['input'],\n    track: ['track']\n  };\n  return composeClasses(slots, useClassNamesOverride(getSwitchUtilityClass));\n};\n/**\n * The foundation for building custom-styled switches.\n *\n * Demos:\n *\n * - [Switch](https://mui.com/base/react-switch/)\n *\n * API:\n *\n * - [Switch API](https://mui.com/base/react-switch/components-api/#switch)\n */\n\n\nconst Switch = /*#__PURE__*/React.forwardRef(function Switch(props, forwardedRef) {\n  var _slots$root, _slots$thumb, _slots$input, _slots$track;\n\n  const {\n    checked: checkedProp,\n    defaultChecked,\n    disabled: disabledProp,\n    onBlur,\n    onChange,\n    onFocus,\n    onFocusVisible,\n    readOnly: readOnlyProp,\n    required,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const useSwitchProps = {\n    checked: checkedProp,\n    defaultChecked,\n    disabled: disabledProp,\n    onBlur,\n    onChange,\n    onFocus,\n    onFocusVisible,\n    readOnly: readOnlyProp\n  };\n  const {\n    getInputProps,\n    checked,\n    disabled,\n    focusVisible,\n    readOnly\n  } = useSwitch(useSwitchProps);\n  const ownerState = { ...props,\n    checked,\n    disabled,\n    focusVisible,\n    readOnly\n  };\n  const classes = useUtilityClasses(ownerState);\n  const Root = (_slots$root = slots.root) != null ? _slots$root : 'span';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const Thumb = (_slots$thumb = slots.thumb) != null ? _slots$thumb : 'span';\n  const thumbProps = useSlotProps({\n    elementType: Thumb,\n    externalSlotProps: slotProps.thumb,\n    ownerState,\n    className: classes.thumb\n  });\n  const Input = (_slots$input = slots.input) != null ? _slots$input : 'input';\n  const inputProps = useSlotProps({\n    elementType: Input,\n    getSlotProps: getInputProps,\n    externalSlotProps: slotProps.input,\n    ownerState,\n    className: classes.input\n  });\n  const Track = slots.track === null ? () => null : (_slots$track = slots.track) != null ? _slots$track : 'span';\n  const trackProps = useSlotProps({\n    elementType: Track,\n    externalSlotProps: slotProps.track,\n    ownerState,\n    className: classes.track\n  });\n  return /*#__PURE__*/_jsxs(Root, { ...rootProps,\n    children: [/*#__PURE__*/_jsx(Track, { ...trackProps\n    }), /*#__PURE__*/_jsx(Thumb, { ...thumbProps\n    }), /*#__PURE__*/_jsx(Input, { ...inputProps\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Switch.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocusVisible: PropTypes.func,\n\n  /**\n   * If `true`, the component is read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * If `true`, the `input` element is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The props used for each slot inside the Switch.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    thumb: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    track: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the Switch.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    input: PropTypes.elementType,\n    root: PropTypes.elementType,\n    thumb: PropTypes.elementType,\n    track: PropTypes.oneOfType([PropTypes.elementType, PropTypes.oneOf([null])])\n  })\n} : void 0;\nexport default Switch;","map":{"version":3,"sources":["C:/React/Portfolio/Portfolio-Youtube/node_modules/@mui/base/Switch/Switch.js"],"names":["React","PropTypes","composeClasses","useSwitch","useSlotProps","useClassNamesOverride","getSwitchUtilityClass","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","checked","disabled","focusVisible","readOnly","slots","root","thumb","input","track","Switch","forwardRef","props","forwardedRef","_slots$root","_slots$thumb","_slots$input","_slots$track","checkedProp","defaultChecked","disabledProp","onBlur","onChange","onFocus","onFocusVisible","readOnlyProp","required","slotProps","other","useSwitchProps","getInputProps","classes","Root","rootProps","elementType","externalSlotProps","externalForwardedProps","additionalProps","ref","className","Thumb","thumbProps","Input","inputProps","getSlotProps","Track","trackProps","children","process","env","NODE_ENV","propTypes","bool","func","shape","oneOfType","object","oneOf"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport composeClasses from '../composeClasses';\nimport useSwitch from '../useSwitch';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { getSwitchUtilityClass } from './switchClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    checked,\n    disabled,\n    focusVisible,\n    readOnly\n  } = ownerState;\n  const slots = {\n    root: ['root', checked && 'checked', disabled && 'disabled', focusVisible && 'focusVisible', readOnly && 'readOnly'],\n    thumb: ['thumb'],\n    input: ['input'],\n    track: ['track']\n  };\n  return composeClasses(slots, useClassNamesOverride(getSwitchUtilityClass));\n};\n\n/**\n * The foundation for building custom-styled switches.\n *\n * Demos:\n *\n * - [Switch](https://mui.com/base/react-switch/)\n *\n * API:\n *\n * - [Switch API](https://mui.com/base/react-switch/components-api/#switch)\n */\nconst Switch = /*#__PURE__*/React.forwardRef(function Switch(props, forwardedRef) {\n  var _slots$root, _slots$thumb, _slots$input, _slots$track;\n  const {\n    checked: checkedProp,\n    defaultChecked,\n    disabled: disabledProp,\n    onBlur,\n    onChange,\n    onFocus,\n    onFocusVisible,\n    readOnly: readOnlyProp,\n    required,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const useSwitchProps = {\n    checked: checkedProp,\n    defaultChecked,\n    disabled: disabledProp,\n    onBlur,\n    onChange,\n    onFocus,\n    onFocusVisible,\n    readOnly: readOnlyProp\n  };\n  const {\n    getInputProps,\n    checked,\n    disabled,\n    focusVisible,\n    readOnly\n  } = useSwitch(useSwitchProps);\n  const ownerState = {\n    ...props,\n    checked,\n    disabled,\n    focusVisible,\n    readOnly\n  };\n  const classes = useUtilityClasses(ownerState);\n  const Root = (_slots$root = slots.root) != null ? _slots$root : 'span';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const Thumb = (_slots$thumb = slots.thumb) != null ? _slots$thumb : 'span';\n  const thumbProps = useSlotProps({\n    elementType: Thumb,\n    externalSlotProps: slotProps.thumb,\n    ownerState,\n    className: classes.thumb\n  });\n  const Input = (_slots$input = slots.input) != null ? _slots$input : 'input';\n  const inputProps = useSlotProps({\n    elementType: Input,\n    getSlotProps: getInputProps,\n    externalSlotProps: slotProps.input,\n    ownerState,\n    className: classes.input\n  });\n  const Track = slots.track === null ? () => null : (_slots$track = slots.track) != null ? _slots$track : 'span';\n  const trackProps = useSlotProps({\n    elementType: Track,\n    externalSlotProps: slotProps.track,\n    ownerState,\n    className: classes.track\n  });\n  return /*#__PURE__*/_jsxs(Root, {\n    ...rootProps,\n    children: [/*#__PURE__*/_jsx(Track, {\n      ...trackProps\n    }), /*#__PURE__*/_jsx(Thumb, {\n      ...thumbProps\n    }), /*#__PURE__*/_jsx(Input, {\n      ...inputProps\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Switch.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocusVisible: PropTypes.func,\n  /**\n   * If `true`, the component is read only.\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, the `input` element is required.\n   */\n  required: PropTypes.bool,\n  /**\n   * The props used for each slot inside the Switch.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    thumb: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    track: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Switch.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    input: PropTypes.elementType,\n    root: PropTypes.elementType,\n    thumb: PropTypes.elementType,\n    track: PropTypes.oneOfType([PropTypes.elementType, PropTypes.oneOf([null])])\n  })\n} : void 0;\nexport default Switch;"]},"metadata":{},"sourceType":"module"}