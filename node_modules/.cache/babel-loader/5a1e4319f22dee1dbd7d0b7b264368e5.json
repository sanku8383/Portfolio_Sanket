{"ast":null,"code":"import { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    themeId,\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider(_ref) {\n    let {\n      children,\n      theme: themeProp = defaultTheme,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      attribute = defaultAttribute,\n      defaultMode = designSystemMode,\n      defaultColorScheme = designSystemColorScheme,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      colorSchemeSelector = ':root',\n      disableNestedContext = false,\n      disableStyleSheetGeneration = false\n    } = _ref;\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const scopedTheme = themeProp[themeId];\n    const {\n      colorSchemes = {},\n      components = {},\n      generateCssVars = () => ({\n        vars: {},\n        css: {}\n      }),\n      cssVarPrefix,\n      ...restThemeProp\n    } = scopedTheme || themeProp;\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark; // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n\n    const calculatedMode = (() => {\n      if (mode) {\n        return mode;\n      } // This scope occurs on the server\n\n\n      if (defaultMode === 'system') {\n        return designSystemMode;\n      }\n\n      return defaultMode;\n    })();\n\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'system'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })(); // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n\n\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = generateCssVars(); // 3. Start composing the theme object\n\n    const theme = { ...restThemeProp,\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    }; // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(_ref2 => {\n      let [key, scheme] = _ref2;\n      const {\n        css,\n        vars\n      } = generateCssVars(key);\n      theme.vars = deepmerge(theme.vars, vars);\n\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(schemeKey => {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = { ...theme[schemeKey],\n              ...scheme[schemeKey]\n            };\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    theme.vars = deepmerge(theme.vars, rootVars); // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]); // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(documentNode.body))();\n\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      mode,\n      systemMode,\n      setMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme,\n      allColorSchemes\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    let shouldGenerateStyleSheet = true;\n\n    if (disableStyleSheetGeneration || nested && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [/*#__PURE__*/_jsx(GlobalStyles, {\n          styles: {\n            [colorSchemeSelector]: rootCss\n          }\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: defaultColorSchemeStyleSheet\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: otherColorSchemesStyleSheet\n        })]\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n\n    if (nested) {\n      return element;\n    }\n\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey,\n    ...params\n  });\n\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":{"version":3,"sources":["C:/React/Portfolio/Portfolio-Youtube/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"names":["formatMuiErrorMessage","_formatMuiErrorMessage","React","PropTypes","deepmerge","GlobalStyles","useTheme","muiUseTheme","ThemeProvider","systemGetInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","themeId","theme","defaultTheme","attribute","defaultAttribute","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","defaultMode","designSystemMode","defaultColorScheme","designSystemColorScheme","disableTransitionOnChange","designSystemTransitionOnChange","resolveTheme","excludeVariablesFromRoot","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","colorSchemeSelector","disableNestedContext","disableStyleSheetGeneration","hasMounted","useRef","upperTheme","ctx","nested","scopedTheme","components","generateCssVars","vars","css","cssVarPrefix","restThemeProp","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","mode","stateMode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","stateColorScheme","setColorScheme","supportedColorSchemes","calculatedMode","calculatedColorScheme","rootCss","rootVars","getColorSchemeSelector","targetColorScheme","defaultColorSchemeStyleSheet","otherColorSchemesStyleSheet","entries","forEach","key","scheme","schemeKey","palette","resolvedDefaultColorScheme","excludedVariables","cssVar","useEffect","setAttribute","timer","current","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","contextValue","useMemo","shouldGenerateStyleSheet","element","Fragment","styles","Provider","propTypes","string","node","any","oneOfType","object","bool","getInitColorSchemeScript","params"],"mappings":"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","sourcesContent":["import { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    themeId,\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n    return value;\n  };\n  function CssVarsProvider({\n    children,\n    theme: themeProp = defaultTheme,\n    modeStorageKey = defaultModeStorageKey,\n    colorSchemeStorageKey = defaultColorSchemeStorageKey,\n    attribute = defaultAttribute,\n    defaultMode = designSystemMode,\n    defaultColorScheme = designSystemColorScheme,\n    disableTransitionOnChange = designSystemTransitionOnChange,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    documentNode = typeof document === 'undefined' ? undefined : document,\n    colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n    colorSchemeSelector = ':root',\n    disableNestedContext = false,\n    disableStyleSheetGeneration = false\n  }) {\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const scopedTheme = themeProp[themeId];\n    const {\n      colorSchemes = {},\n      components = {},\n      generateCssVars = () => ({\n        vars: {},\n        css: {}\n      }),\n      cssVarPrefix,\n      ...restThemeProp\n    } = scopedTheme || themeProp;\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n    const calculatedMode = (() => {\n      if (mode) {\n        return mode;\n      }\n      // This scope occurs on the server\n      if (defaultMode === 'system') {\n        return designSystemMode;\n      }\n      return defaultMode;\n    })();\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        }\n        // use light color scheme, if default mode is 'light' | 'system'\n        return defaultLightColorScheme;\n      }\n      return colorScheme;\n    })();\n\n    // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = generateCssVars();\n\n    // 3. Start composing the theme object\n    const theme = {\n      ...restThemeProp,\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    };\n\n    // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars\n      } = generateCssVars(key);\n      theme.vars = deepmerge(theme.vars, vars);\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(schemeKey => {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = {\n              ...theme[schemeKey],\n              ...scheme[schemeKey]\n            };\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n        return defaultColorScheme.light;\n      })();\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    theme.vars = deepmerge(theme.vars, rootVars);\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      mode,\n      systemMode,\n      setMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme,\n      allColorSchemes\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    let shouldGenerateStyleSheet = true;\n    if (disableStyleSheetGeneration || nested && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [/*#__PURE__*/_jsx(GlobalStyles, {\n          styles: {\n            [colorSchemeSelector]: rootCss\n          }\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: defaultColorSchemeStyleSheet\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: otherColorSchemesStyleSheet\n        })]\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n    if (nested) {\n      return element;\n    }\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey,\n    ...params\n  });\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"]},"metadata":{},"sourceType":"module"}