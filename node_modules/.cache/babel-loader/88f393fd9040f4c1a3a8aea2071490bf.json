{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport composeClasses from '../composeClasses';\nimport { getButtonUtilityClass } from './buttonClasses';\nimport useButton from '../useButton';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    active,\n    disabled,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active']\n  };\n  return composeClasses(slots, useClassNamesOverride(getButtonUtilityClass));\n};\n/**\n * The foundation for building custom-styled buttons.\n *\n * Demos:\n *\n * - [Button](https://mui.com/base/react-button/)\n *\n * API:\n *\n * - [Button API](https://mui.com/base/react-button/components-api/#button)\n */\n\n\nconst Button = /*#__PURE__*/React.forwardRef(function Button(props, forwardedRef) {\n  var _slots$root;\n\n  const {\n    action,\n    children,\n    disabled,\n    focusableWhenDisabled = false,\n    onFocusVisible,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const buttonRef = React.useRef();\n  const {\n    active,\n    focusVisible,\n    setFocusVisible,\n    getRootProps\n  } = useButton({ ...props,\n    focusableWhenDisabled\n  });\n  React.useImperativeHandle(action, () => ({\n    focusVisible: () => {\n      setFocusVisible(true);\n      buttonRef.current.focus();\n    }\n  }), [setFocusVisible]);\n  const ownerState = { ...props,\n    active,\n    focusableWhenDisabled,\n    focusVisible\n  };\n  const classes = useUtilityClasses(ownerState);\n  const defaultElement = other.href || other.to ? 'a' : 'button';\n  const Root = (_slots$root = slots.root) != null ? _slots$root : defaultElement;\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalForwardedProps: other,\n    externalSlotProps: slotProps.root,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  return /*#__PURE__*/_jsx(Root, { ...rootProps,\n    children: children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Button.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A ref for imperative actions. It currently only supports `focusVisible()` action.\n   */\n  action: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      focusVisible: PropTypes.func.isRequired\n    })\n  })]),\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, allows a disabled button to receive focus.\n   * @default false\n   */\n  focusableWhenDisabled: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  href: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onFocusVisible: PropTypes.func,\n\n  /**\n   * The props used for each slot inside the Button.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the Button.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n\n  /**\n   * @ignore\n   */\n  to: PropTypes.string\n} : void 0;\nexport default Button;","map":{"version":3,"sources":["C:/React/Portfolio/Portfolio-Youtube/node_modules/@mui/base/Button/Button.js"],"names":["React","PropTypes","composeClasses","getButtonUtilityClass","useButton","useSlotProps","useClassNamesOverride","jsx","_jsx","useUtilityClasses","ownerState","active","disabled","focusVisible","slots","root","Button","forwardRef","props","forwardedRef","_slots$root","action","children","focusableWhenDisabled","onFocusVisible","slotProps","other","buttonRef","useRef","setFocusVisible","getRootProps","useImperativeHandle","current","focus","classes","defaultElement","href","to","Root","rootProps","elementType","getSlotProps","externalForwardedProps","externalSlotProps","additionalProps","ref","className","process","env","NODE_ENV","propTypes","oneOfType","func","shape","isRequired","node","bool","string","object"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport composeClasses from '../composeClasses';\nimport { getButtonUtilityClass } from './buttonClasses';\nimport useButton from '../useButton';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    active,\n    disabled,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active']\n  };\n  return composeClasses(slots, useClassNamesOverride(getButtonUtilityClass));\n};\n/**\n * The foundation for building custom-styled buttons.\n *\n * Demos:\n *\n * - [Button](https://mui.com/base/react-button/)\n *\n * API:\n *\n * - [Button API](https://mui.com/base/react-button/components-api/#button)\n */\nconst Button = /*#__PURE__*/React.forwardRef(function Button(props, forwardedRef) {\n  var _slots$root;\n  const {\n    action,\n    children,\n    disabled,\n    focusableWhenDisabled = false,\n    onFocusVisible,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const buttonRef = React.useRef();\n  const {\n    active,\n    focusVisible,\n    setFocusVisible,\n    getRootProps\n  } = useButton({\n    ...props,\n    focusableWhenDisabled\n  });\n  React.useImperativeHandle(action, () => ({\n    focusVisible: () => {\n      setFocusVisible(true);\n      buttonRef.current.focus();\n    }\n  }), [setFocusVisible]);\n  const ownerState = {\n    ...props,\n    active,\n    focusableWhenDisabled,\n    focusVisible\n  };\n  const classes = useUtilityClasses(ownerState);\n  const defaultElement = other.href || other.to ? 'a' : 'button';\n  const Root = (_slots$root = slots.root) != null ? _slots$root : defaultElement;\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalForwardedProps: other,\n    externalSlotProps: slotProps.root,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  return /*#__PURE__*/_jsx(Root, {\n    ...rootProps,\n    children: children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Button.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * A ref for imperative actions. It currently only supports `focusVisible()` action.\n   */\n  action: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      focusVisible: PropTypes.func.isRequired\n    })\n  })]),\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, allows a disabled button to receive focus.\n   * @default false\n   */\n  focusableWhenDisabled: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  href: PropTypes.string,\n  /**\n   * @ignore\n   */\n  onFocusVisible: PropTypes.func,\n  /**\n   * The props used for each slot inside the Button.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Button.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\n   * @ignore\n   */\n  to: PropTypes.string\n} : void 0;\nexport default Button;"]},"metadata":{},"sourceType":"module"}