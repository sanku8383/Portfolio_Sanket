{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport composeClasses from '../composeClasses';\nimport useBadge from '../useBadge';\nimport { getBadgeUtilityClass } from './badgeClasses';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    invisible\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    badge: ['badge', invisible && 'invisible']\n  };\n  return composeClasses(slots, useClassNamesOverride(getBadgeUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Badge](https://mui.com/base/react-badge/)\n *\n * API:\n *\n * - [Badge API](https://mui.com/base/react-badge/components-api/#badge)\n */\n\n\nconst Badge = /*#__PURE__*/React.forwardRef(function Badge(props, forwardedRef) {\n  var _slots$root, _slots$badge;\n\n  const {\n    badgeContent: badgeContentProp,\n    children,\n    invisible: invisibleProp,\n    max: maxProp = 99,\n    slotProps = {},\n    slots = {},\n    showZero = false,\n    ...other\n  } = props;\n  const {\n    badgeContent,\n    max,\n    displayValue,\n    invisible\n  } = useBadge({ ...props,\n    max: maxProp\n  });\n  const ownerState = { ...props,\n    badgeContent,\n    invisible,\n    max,\n    showZero\n  };\n  const classes = useUtilityClasses(ownerState);\n  const Root = (_slots$root = slots.root) != null ? _slots$root : 'span';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const BadgeComponent = (_slots$badge = slots.badge) != null ? _slots$badge : 'span';\n  const badgeProps = useSlotProps({\n    elementType: BadgeComponent,\n    externalSlotProps: slotProps.badge,\n    ownerState,\n    className: classes.badge\n  });\n  return /*#__PURE__*/_jsxs(Root, { ...rootProps,\n    children: [children, /*#__PURE__*/_jsx(BadgeComponent, { ...badgeProps,\n      children: displayValue\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Badge.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * If `true`, the badge is invisible.\n   * @default false\n   */\n  invisible: PropTypes.bool,\n\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: PropTypes.number,\n\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: PropTypes.bool,\n\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    badge: PropTypes.elementType,\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport default Badge;","map":{"version":3,"sources":["C:/React/Portfolio/Portfolio-Youtube/node_modules/@mui/base/Badge/Badge.js"],"names":["React","PropTypes","composeClasses","useBadge","getBadgeUtilityClass","useSlotProps","useClassNamesOverride","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","invisible","slots","root","badge","Badge","forwardRef","props","forwardedRef","_slots$root","_slots$badge","badgeContent","badgeContentProp","children","invisibleProp","max","maxProp","slotProps","showZero","other","displayValue","classes","Root","rootProps","elementType","externalSlotProps","externalForwardedProps","additionalProps","ref","className","BadgeComponent","badgeProps","process","env","NODE_ENV","propTypes","node","bool","number","shape","oneOfType","func","object"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport composeClasses from '../composeClasses';\nimport useBadge from '../useBadge';\nimport { getBadgeUtilityClass } from './badgeClasses';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    invisible\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    badge: ['badge', invisible && 'invisible']\n  };\n  return composeClasses(slots, useClassNamesOverride(getBadgeUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Badge](https://mui.com/base/react-badge/)\n *\n * API:\n *\n * - [Badge API](https://mui.com/base/react-badge/components-api/#badge)\n */\nconst Badge = /*#__PURE__*/React.forwardRef(function Badge(props, forwardedRef) {\n  var _slots$root, _slots$badge;\n  const {\n    badgeContent: badgeContentProp,\n    children,\n    invisible: invisibleProp,\n    max: maxProp = 99,\n    slotProps = {},\n    slots = {},\n    showZero = false,\n    ...other\n  } = props;\n  const {\n    badgeContent,\n    max,\n    displayValue,\n    invisible\n  } = useBadge({\n    ...props,\n    max: maxProp\n  });\n  const ownerState = {\n    ...props,\n    badgeContent,\n    invisible,\n    max,\n    showZero\n  };\n  const classes = useUtilityClasses(ownerState);\n  const Root = (_slots$root = slots.root) != null ? _slots$root : 'span';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const BadgeComponent = (_slots$badge = slots.badge) != null ? _slots$badge : 'span';\n  const badgeProps = useSlotProps({\n    elementType: BadgeComponent,\n    externalSlotProps: slotProps.badge,\n    ownerState,\n    className: classes.badge\n  });\n  return /*#__PURE__*/_jsxs(Root, {\n    ...rootProps,\n    children: [children, /*#__PURE__*/_jsx(BadgeComponent, {\n      ...badgeProps,\n      children: displayValue\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Badge.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n  /**\n   * If `true`, the badge is invisible.\n   * @default false\n   */\n  invisible: PropTypes.bool,\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: PropTypes.number,\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: PropTypes.bool,\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    badge: PropTypes.elementType,\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport default Badge;"]},"metadata":{},"sourceType":"module"}