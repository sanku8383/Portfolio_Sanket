{"ast":null,"code":"var _span;\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport capitalize from '../utils/capitalize';\nimport Typography from '../Typography';\nimport FormControlContext from '../FormControl/FormControlContext';\nimport useFormControl from '../FormControl/useFormControl';\nimport styled from '../styles/styled';\nimport inputAdornmentClasses, { getInputAdornmentUtilityClass } from './inputAdornmentClasses';\nimport useThemeProps from '../styles/useThemeProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst overridesResolver = (props, styles) => {\n  const {\n    ownerState\n  } = props;\n  return [styles.root, styles[`position${capitalize(ownerState.position)}`], ownerState.disablePointerEvents === true && styles.disablePointerEvents, styles[ownerState.variant]];\n};\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePointerEvents,\n    hiddenLabel,\n    position,\n    size,\n    variant\n  } = ownerState;\n  const slots = {\n    root: ['root', disablePointerEvents && 'disablePointerEvents', position && `position${capitalize(position)}`, variant, hiddenLabel && 'hiddenLabel', size && `size${capitalize(size)}`]\n  };\n  return composeClasses(slots, getInputAdornmentUtilityClass, classes);\n};\n\nconst InputAdornmentRoot = styled('div', {\n  name: 'MuiInputAdornment',\n  slot: 'Root',\n  overridesResolver\n})(_ref => {\n  let {\n    theme,\n    ownerState\n  } = _ref;\n  return {\n    display: 'flex',\n    height: '0.01em',\n    // Fix IE11 flexbox alignment. To remove at some point.\n    maxHeight: '2em',\n    alignItems: 'center',\n    whiteSpace: 'nowrap',\n    color: (theme.vars || theme).palette.action.active,\n    ...(ownerState.variant === 'filled' && {\n      // Styles applied to the root element if `variant=\"filled\"`.\n      [`&.${inputAdornmentClasses.positionStart}&:not(.${inputAdornmentClasses.hiddenLabel})`]: {\n        marginTop: 16\n      }\n    }),\n    ...(ownerState.position === 'start' && {\n      // Styles applied to the root element if `position=\"start\"`.\n      marginRight: 8\n    }),\n    ...(ownerState.position === 'end' && {\n      // Styles applied to the root element if `position=\"end\"`.\n      marginLeft: 8\n    }),\n    ...(ownerState.disablePointerEvents === true && {\n      // Styles applied to the root element if `disablePointerEvents={true}`.\n      pointerEvents: 'none'\n    })\n  };\n});\nconst InputAdornment = /*#__PURE__*/React.forwardRef(function InputAdornment(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiInputAdornment'\n  });\n  const {\n    children,\n    className,\n    component = 'div',\n    disablePointerEvents = false,\n    disableTypography = false,\n    position,\n    variant: variantProp,\n    ...other\n  } = props;\n  const muiFormControl = useFormControl() || {};\n  let variant = variantProp;\n\n  if (variantProp && muiFormControl.variant) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (variantProp === muiFormControl.variant) {\n        console.error('MUI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');\n      }\n    }\n  }\n\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n\n  const ownerState = { ...props,\n    hiddenLabel: muiFormControl.hiddenLabel,\n    size: muiFormControl.size,\n    disablePointerEvents,\n    position,\n    variant\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(FormControlContext.Provider, {\n    value: null,\n    children: /*#__PURE__*/_jsx(InputAdornmentRoot, {\n      as: component,\n      ownerState: ownerState,\n      className: clsx(classes.root, className),\n      ref: ref,\n      ...other,\n      children: typeof children === 'string' && !disableTypography ? /*#__PURE__*/_jsx(Typography, {\n        color: \"text.secondary\",\n        children: children\n      }) : /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [position === 'start' ?\n        /* notranslate needed while Google Translate will not fix zero-width space issue */\n        _span || (_span = /*#__PURE__*/_jsx(\"span\", {\n          className: \"notranslate\",\n          children: \"\\u200B\"\n        })) : null, children]\n      })\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? InputAdornment.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the `input` on click.\n   * @default false\n   */\n  disablePointerEvents: PropTypes.bool,\n\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   * @default false\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: PropTypes.oneOf(['end', 'start']).isRequired,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default InputAdornment;","map":{"version":3,"sources":["C:/React/Portfolio/Portfolio-Youtube/node_modules/@mui/material/InputAdornment/InputAdornment.js"],"names":["_span","React","PropTypes","clsx","unstable_composeClasses","composeClasses","capitalize","Typography","FormControlContext","useFormControl","styled","inputAdornmentClasses","getInputAdornmentUtilityClass","useThemeProps","jsx","_jsx","jsxs","_jsxs","overridesResolver","props","styles","ownerState","root","position","disablePointerEvents","variant","useUtilityClasses","classes","hiddenLabel","size","slots","InputAdornmentRoot","name","slot","theme","display","height","maxHeight","alignItems","whiteSpace","color","vars","palette","action","active","positionStart","marginTop","marginRight","marginLeft","pointerEvents","InputAdornment","forwardRef","inProps","ref","children","className","component","disableTypography","variantProp","other","muiFormControl","process","env","NODE_ENV","console","error","Provider","value","as","Fragment","propTypes","node","object","string","elementType","bool","oneOf","isRequired","sx","oneOfType","arrayOf","func"],"mappings":"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","sourcesContent":["var _span;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport capitalize from '../utils/capitalize';\nimport Typography from '../Typography';\nimport FormControlContext from '../FormControl/FormControlContext';\nimport useFormControl from '../FormControl/useFormControl';\nimport styled from '../styles/styled';\nimport inputAdornmentClasses, { getInputAdornmentUtilityClass } from './inputAdornmentClasses';\nimport useThemeProps from '../styles/useThemeProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst overridesResolver = (props, styles) => {\n  const {\n    ownerState\n  } = props;\n  return [styles.root, styles[`position${capitalize(ownerState.position)}`], ownerState.disablePointerEvents === true && styles.disablePointerEvents, styles[ownerState.variant]];\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePointerEvents,\n    hiddenLabel,\n    position,\n    size,\n    variant\n  } = ownerState;\n  const slots = {\n    root: ['root', disablePointerEvents && 'disablePointerEvents', position && `position${capitalize(position)}`, variant, hiddenLabel && 'hiddenLabel', size && `size${capitalize(size)}`]\n  };\n  return composeClasses(slots, getInputAdornmentUtilityClass, classes);\n};\nconst InputAdornmentRoot = styled('div', {\n  name: 'MuiInputAdornment',\n  slot: 'Root',\n  overridesResolver\n})(({\n  theme,\n  ownerState\n}) => ({\n  display: 'flex',\n  height: '0.01em',\n  // Fix IE11 flexbox alignment. To remove at some point.\n  maxHeight: '2em',\n  alignItems: 'center',\n  whiteSpace: 'nowrap',\n  color: (theme.vars || theme).palette.action.active,\n  ...(ownerState.variant === 'filled' && {\n    // Styles applied to the root element if `variant=\"filled\"`.\n    [`&.${inputAdornmentClasses.positionStart}&:not(.${inputAdornmentClasses.hiddenLabel})`]: {\n      marginTop: 16\n    }\n  }),\n  ...(ownerState.position === 'start' && {\n    // Styles applied to the root element if `position=\"start\"`.\n    marginRight: 8\n  }),\n  ...(ownerState.position === 'end' && {\n    // Styles applied to the root element if `position=\"end\"`.\n    marginLeft: 8\n  }),\n  ...(ownerState.disablePointerEvents === true && {\n    // Styles applied to the root element if `disablePointerEvents={true}`.\n    pointerEvents: 'none'\n  })\n}));\nconst InputAdornment = /*#__PURE__*/React.forwardRef(function InputAdornment(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiInputAdornment'\n  });\n  const {\n    children,\n    className,\n    component = 'div',\n    disablePointerEvents = false,\n    disableTypography = false,\n    position,\n    variant: variantProp,\n    ...other\n  } = props;\n  const muiFormControl = useFormControl() || {};\n  let variant = variantProp;\n  if (variantProp && muiFormControl.variant) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (variantProp === muiFormControl.variant) {\n        console.error('MUI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');\n      }\n    }\n  }\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n  const ownerState = {\n    ...props,\n    hiddenLabel: muiFormControl.hiddenLabel,\n    size: muiFormControl.size,\n    disablePointerEvents,\n    position,\n    variant\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(FormControlContext.Provider, {\n    value: null,\n    children: /*#__PURE__*/_jsx(InputAdornmentRoot, {\n      as: component,\n      ownerState: ownerState,\n      className: clsx(classes.root, className),\n      ref: ref,\n      ...other,\n      children: typeof children === 'string' && !disableTypography ? /*#__PURE__*/_jsx(Typography, {\n        color: \"text.secondary\",\n        children: children\n      }) : /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [position === 'start' ? /* notranslate needed while Google Translate will not fix zero-width space issue */_span || (_span = /*#__PURE__*/_jsx(\"span\", {\n          className: \"notranslate\",\n          children: \"\\u200B\"\n        })) : null, children]\n      })\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? InputAdornment.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the `input` on click.\n   * @default false\n   */\n  disablePointerEvents: PropTypes.bool,\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   * @default false\n   */\n  disableTypography: PropTypes.bool,\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: PropTypes.oneOf(['end', 'start']).isRequired,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default InputAdornment;"]},"metadata":{},"sourceType":"module"}