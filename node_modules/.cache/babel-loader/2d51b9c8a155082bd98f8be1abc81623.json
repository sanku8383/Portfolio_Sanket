{"ast":null,"code":"import { deepmerge } from '@mui/utils';\nimport cssVarsParser from './cssVarsParser';\n\nfunction prepareCssVars(theme, parserConfig) {\n  // @ts-ignore - ignore components do not exist\n  const {\n    colorSchemes = {},\n    components,\n    ...otherTheme\n  } = theme;\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = cssVarsParser(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n  const {\n    light,\n    ...otherColorSchemes\n  } = colorSchemes;\n  Object.entries(otherColorSchemes || {}).forEach(_ref => {\n    let [key, scheme] = _ref;\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = cssVarsParser(scheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n\n  if (light) {\n    // light color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = cssVarsParser(light, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap.light = {\n      css,\n      vars\n    };\n  }\n\n  const generateCssVars = colorScheme => {\n    if (!colorScheme) {\n      return {\n        css: { ...rootCss\n        },\n        vars: rootVars\n      };\n    }\n\n    return {\n      css: { ...colorSchemesMap[colorScheme].css\n      },\n      vars: colorSchemesMap[colorScheme].vars\n    };\n  };\n\n  return {\n    vars: themeVars,\n    generateCssVars\n  };\n}\n\nexport default prepareCssVars;","map":{"version":3,"sources":["C:/React/Portfolio/Portfolio-Youtube/node_modules/@mui/system/esm/cssVars/prepareCssVars.js"],"names":["deepmerge","cssVarsParser","prepareCssVars","theme","parserConfig","colorSchemes","components","otherTheme","vars","rootVars","css","rootCss","varsWithDefaults","rootVarsWithDefaults","themeVars","colorSchemesMap","light","otherColorSchemes","Object","entries","forEach","key","scheme","generateCssVars","colorScheme"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,YAA/B,EAA6C;AAC3C;AACA,QAAM;AACJC,IAAAA,YAAY,GAAG,EADX;AAEJC,IAAAA,UAFI;AAGJ,OAAGC;AAHC,MAIFJ,KAJJ;AAKA,QAAM;AACJK,IAAAA,IAAI,EAAEC,QADF;AAEJC,IAAAA,GAAG,EAAEC,OAFD;AAGJC,IAAAA,gBAAgB,EAAEC;AAHd,MAIFZ,aAAa,CAACM,UAAD,EAAaH,YAAb,CAJjB;AAKA,MAAIU,SAAS,GAAGD,oBAAhB;AACA,QAAME,eAAe,GAAG,EAAxB;AACA,QAAM;AACJC,IAAAA,KADI;AAEJ,OAAGC;AAFC,MAGFZ,YAHJ;AAIAa,EAAAA,MAAM,CAACC,OAAP,CAAeF,iBAAiB,IAAI,EAApC,EAAwCG,OAAxC,CAAgD,QAAmB;AAAA,QAAlB,CAACC,GAAD,EAAMC,MAAN,CAAkB;AACjE,UAAM;AACJd,MAAAA,IADI;AAEJE,MAAAA,GAFI;AAGJE,MAAAA;AAHI,QAIFX,aAAa,CAACqB,MAAD,EAASlB,YAAT,CAJjB;AAKAU,IAAAA,SAAS,GAAGd,SAAS,CAACc,SAAD,EAAYF,gBAAZ,CAArB;AACAG,IAAAA,eAAe,CAACM,GAAD,CAAf,GAAuB;AACrBX,MAAAA,GADqB;AAErBF,MAAAA;AAFqB,KAAvB;AAID,GAXD;;AAYA,MAAIQ,KAAJ,EAAW;AACT;AACA,UAAM;AACJN,MAAAA,GADI;AAEJF,MAAAA,IAFI;AAGJI,MAAAA;AAHI,QAIFX,aAAa,CAACe,KAAD,EAAQZ,YAAR,CAJjB;AAKAU,IAAAA,SAAS,GAAGd,SAAS,CAACc,SAAD,EAAYF,gBAAZ,CAArB;AACAG,IAAAA,eAAe,CAACC,KAAhB,GAAwB;AACtBN,MAAAA,GADsB;AAEtBF,MAAAA;AAFsB,KAAxB;AAID;;AACD,QAAMe,eAAe,GAAGC,WAAW,IAAI;AACrC,QAAI,CAACA,WAAL,EAAkB;AAChB,aAAO;AACLd,QAAAA,GAAG,EAAE,EACH,GAAGC;AADA,SADA;AAILH,QAAAA,IAAI,EAAEC;AAJD,OAAP;AAMD;;AACD,WAAO;AACLC,MAAAA,GAAG,EAAE,EACH,GAAGK,eAAe,CAACS,WAAD,CAAf,CAA6Bd;AAD7B,OADA;AAILF,MAAAA,IAAI,EAAEO,eAAe,CAACS,WAAD,CAAf,CAA6BhB;AAJ9B,KAAP;AAMD,GAfD;;AAgBA,SAAO;AACLA,IAAAA,IAAI,EAAEM,SADD;AAELS,IAAAA;AAFK,GAAP;AAID;;AACD,eAAerB,cAAf","sourcesContent":["import { deepmerge } from '@mui/utils';\nimport cssVarsParser from './cssVarsParser';\nfunction prepareCssVars(theme, parserConfig) {\n  // @ts-ignore - ignore components do not exist\n  const {\n    colorSchemes = {},\n    components,\n    ...otherTheme\n  } = theme;\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = cssVarsParser(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n  const {\n    light,\n    ...otherColorSchemes\n  } = colorSchemes;\n  Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = cssVarsParser(scheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n  if (light) {\n    // light color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = cssVarsParser(light, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap.light = {\n      css,\n      vars\n    };\n  }\n  const generateCssVars = colorScheme => {\n    if (!colorScheme) {\n      return {\n        css: {\n          ...rootCss\n        },\n        vars: rootVars\n      };\n    }\n    return {\n      css: {\n        ...colorSchemesMap[colorScheme].css\n      },\n      vars: colorSchemesMap[colorScheme].vars\n    };\n  };\n  return {\n    vars: themeVars,\n    generateCssVars\n  };\n}\nexport default prepareCssVars;"]},"metadata":{},"sourceType":"module"}