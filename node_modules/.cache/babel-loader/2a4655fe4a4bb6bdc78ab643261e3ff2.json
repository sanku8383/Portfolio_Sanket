{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport composeClasses from '../composeClasses';\nimport { getOptionUtilityClass } from './optionClasses';\nimport { useSlotProps } from '../utils';\nimport useOption from '../useOption';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction useUtilityClasses(ownerState) {\n  const {\n    disabled,\n    highlighted,\n    selected\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', highlighted && 'highlighted', selected && 'selected']\n  };\n  return composeClasses(slots, useClassNamesOverride(getOptionUtilityClass));\n}\n/**\n * An unstyled option to be used within a Select.\n */\n\n\nconst Option = /*#__PURE__*/React.forwardRef(function Option(props, forwardedRef) {\n  var _slots$root, _optionRef$current;\n\n  const {\n    children,\n    disabled = false,\n    label,\n    slotProps = {},\n    slots = {},\n    value,\n    ...other\n  } = props;\n  const Root = (_slots$root = slots.root) != null ? _slots$root : 'li';\n  const optionRef = React.useRef(null);\n  const combinedRef = useForkRef(optionRef, forwardedRef); // If `label` is not explicitly provided, the `children` are used for convenience.\n  // This is used to populate the select's trigger with the selected option's label.\n\n  const computedLabel = label != null ? label : typeof children === 'string' ? children : (_optionRef$current = optionRef.current) == null ? void 0 : _optionRef$current.innerText;\n  const {\n    getRootProps,\n    selected,\n    highlighted,\n    index\n  } = useOption({\n    disabled,\n    label: computedLabel,\n    rootRef: combinedRef,\n    value\n  });\n  const ownerState = { ...props,\n    disabled,\n    highlighted,\n    index,\n    selected\n  };\n  const classes = useUtilityClasses(ownerState);\n  const rootProps = useSlotProps({\n    getSlotProps: getRootProps,\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    className: classes.root,\n    ownerState\n  });\n  return /*#__PURE__*/_jsx(Root, { ...rootProps,\n    children: children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Option.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * If `true`, the option will be disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * A text representation of the option's content.\n   * Used for keyboard text navigation matching.\n   */\n  label: PropTypes.string,\n\n  /**\n   * The props used for each slot inside the Option.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the Option.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n\n  /**\n   * The value of the option.\n   */\n  value: PropTypes.any.isRequired\n} : void 0;\n/**\n * An unstyled option to be used within a Select.\n *\n * Demos:\n *\n * - [Select](https://mui.com/base/react-select/)\n *\n * API:\n *\n * - [Option API](https://mui.com/base/react-select/components-api/#option)\n */\n\nexport default /*#__PURE__*/React.memo(Option);","map":{"version":3,"sources":["C:/React/Portfolio/Portfolio-Youtube/node_modules/@mui/base/Option/Option.js"],"names":["React","PropTypes","unstable_useForkRef","useForkRef","composeClasses","getOptionUtilityClass","useSlotProps","useOption","useClassNamesOverride","jsx","_jsx","useUtilityClasses","ownerState","disabled","highlighted","selected","slots","root","Option","forwardRef","props","forwardedRef","_slots$root","_optionRef$current","children","label","slotProps","value","other","Root","optionRef","useRef","combinedRef","computedLabel","current","innerText","getRootProps","index","rootRef","classes","rootProps","getSlotProps","elementType","externalSlotProps","externalForwardedProps","className","process","env","NODE_ENV","propTypes","node","bool","string","shape","oneOfType","func","object","any","isRequired","memo"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport composeClasses from '../composeClasses';\nimport { getOptionUtilityClass } from './optionClasses';\nimport { useSlotProps } from '../utils';\nimport useOption from '../useOption';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction useUtilityClasses(ownerState) {\n  const {\n    disabled,\n    highlighted,\n    selected\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', highlighted && 'highlighted', selected && 'selected']\n  };\n  return composeClasses(slots, useClassNamesOverride(getOptionUtilityClass));\n}\n\n/**\n * An unstyled option to be used within a Select.\n */\nconst Option = /*#__PURE__*/React.forwardRef(function Option(props, forwardedRef) {\n  var _slots$root, _optionRef$current;\n  const {\n    children,\n    disabled = false,\n    label,\n    slotProps = {},\n    slots = {},\n    value,\n    ...other\n  } = props;\n  const Root = (_slots$root = slots.root) != null ? _slots$root : 'li';\n  const optionRef = React.useRef(null);\n  const combinedRef = useForkRef(optionRef, forwardedRef);\n\n  // If `label` is not explicitly provided, the `children` are used for convenience.\n  // This is used to populate the select's trigger with the selected option's label.\n  const computedLabel = label != null ? label : typeof children === 'string' ? children : (_optionRef$current = optionRef.current) == null ? void 0 : _optionRef$current.innerText;\n  const {\n    getRootProps,\n    selected,\n    highlighted,\n    index\n  } = useOption({\n    disabled,\n    label: computedLabel,\n    rootRef: combinedRef,\n    value\n  });\n  const ownerState = {\n    ...props,\n    disabled,\n    highlighted,\n    index,\n    selected\n  };\n  const classes = useUtilityClasses(ownerState);\n  const rootProps = useSlotProps({\n    getSlotProps: getRootProps,\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    className: classes.root,\n    ownerState\n  });\n  return /*#__PURE__*/_jsx(Root, {\n    ...rootProps,\n    children: children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Option.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * If `true`, the option will be disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * A text representation of the option's content.\n   * Used for keyboard text navigation matching.\n   */\n  label: PropTypes.string,\n  /**\n   * The props used for each slot inside the Option.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Option.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\n   * The value of the option.\n   */\n  value: PropTypes.any.isRequired\n} : void 0;\n\n/**\n * An unstyled option to be used within a Select.\n *\n * Demos:\n *\n * - [Select](https://mui.com/base/react-select/)\n *\n * API:\n *\n * - [Option API](https://mui.com/base/react-select/components-api/#option)\n */\nexport default /*#__PURE__*/React.memo(Option);"]},"metadata":{},"sourceType":"module"}