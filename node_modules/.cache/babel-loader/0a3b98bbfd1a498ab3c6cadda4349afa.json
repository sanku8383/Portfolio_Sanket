{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { getDisplayName } from '@mui/utils';\nimport { getThemeProps } from '@mui/system';\nimport useTheme from '../styles/useTheme';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nimport useMediaQuery from '../useMediaQuery';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst breakpointKeys = ['xs', 'sm', 'md', 'lg', 'xl']; // By default, returns true if screen width is the same or greater than the given breakpoint.\n\nexport const isWidthUp = function (breakpoint, width) {\n  let inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  if (inclusive) {\n    return breakpointKeys.indexOf(breakpoint) <= breakpointKeys.indexOf(width);\n  }\n\n  return breakpointKeys.indexOf(breakpoint) < breakpointKeys.indexOf(width);\n}; // By default, returns true if screen width is the same or less than the given breakpoint.\n\nexport const isWidthDown = function (breakpoint, width) {\n  let inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (inclusive) {\n    return breakpointKeys.indexOf(width) <= breakpointKeys.indexOf(breakpoint);\n  }\n\n  return breakpointKeys.indexOf(width) < breakpointKeys.indexOf(breakpoint);\n};\n\nconst withWidth = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return Component => {\n    const {\n      withTheme: withThemeOption = false,\n      noSSR = false,\n      initialWidth: initialWidthOption\n    } = options;\n\n    function WithWidth(props) {\n      const contextTheme = useTheme();\n      const theme = props.theme || contextTheme;\n      const {\n        initialWidth,\n        width,\n        ...other\n      } = getThemeProps({\n        theme,\n        name: 'MuiWithWidth',\n        props\n      });\n      const [mountedState, setMountedState] = React.useState(false);\n      useEnhancedEffect(() => {\n        setMountedState(true);\n      }, []);\n      /**\n       * innerWidth |xs      sm      md      lg      xl\n       *            |-------|-------|-------|-------|------>\n       * width      |  xs   |  sm   |  md   |  lg   |  xl\n       */\n\n      const keys = theme.breakpoints.keys.slice().reverse();\n      const widthComputed = keys.reduce((output, key) => {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const matches = useMediaQuery(theme.breakpoints.up(key));\n        return !output && matches ? key : output;\n      }, null);\n      const more = {\n        width: width || (mountedState || noSSR ? widthComputed : undefined) || initialWidth || initialWidthOption,\n        ...(withThemeOption ? {\n          theme\n        } : {}),\n        ...other\n      }; // When rendering the component on the server,\n      // we have no idea about the client browser screen width.\n      // In order to prevent blinks and help the reconciliation of the React tree\n      // we are not rendering the child component.\n      //\n      // An alternative is to use the `initialWidth` property.\n\n      if (more.width === undefined) {\n        return null;\n      }\n\n      return /*#__PURE__*/_jsx(Component, { ...more\n      });\n    }\n\n    process.env.NODE_ENV !== \"production\" ? WithWidth.propTypes = {\n      /**\n       * As `window.innerWidth` is unavailable on the server,\n       * we default to rendering an empty component during the first mount.\n       * You might want to use a heuristic to approximate\n       * the screen width of the client browser screen width.\n       *\n       * For instance, you could be using the user-agent or the client-hints.\n       * https://caniuse.com/#search=client%20hint\n       */\n      initialWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n\n      /**\n       * @ignore\n       */\n      theme: PropTypes.object,\n\n      /**\n       * Bypass the width calculation logic.\n       */\n      width: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])\n    } : void 0;\n\n    if (process.env.NODE_ENV !== 'production') {\n      WithWidth.displayName = `WithWidth(${getDisplayName(Component)})`;\n    }\n\n    return WithWidth;\n  };\n};\n\nexport default withWidth;","map":{"version":3,"sources":["C:/React/Portfolio/Portfolio-Youtube/node_modules/@mui/material/Hidden/withWidth.js"],"names":["React","PropTypes","getDisplayName","getThemeProps","useTheme","useEnhancedEffect","useMediaQuery","jsx","_jsx","breakpointKeys","isWidthUp","breakpoint","width","inclusive","indexOf","isWidthDown","withWidth","options","Component","withTheme","withThemeOption","noSSR","initialWidth","initialWidthOption","WithWidth","props","contextTheme","theme","other","name","mountedState","setMountedState","useState","keys","breakpoints","slice","reverse","widthComputed","reduce","output","key","matches","up","more","undefined","process","env","NODE_ENV","propTypes","oneOf","object","displayName"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { getDisplayName } from '@mui/utils';\nimport { getThemeProps } from '@mui/system';\nimport useTheme from '../styles/useTheme';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nimport useMediaQuery from '../useMediaQuery';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst breakpointKeys = ['xs', 'sm', 'md', 'lg', 'xl'];\n\n// By default, returns true if screen width is the same or greater than the given breakpoint.\nexport const isWidthUp = (breakpoint, width, inclusive = true) => {\n  if (inclusive) {\n    return breakpointKeys.indexOf(breakpoint) <= breakpointKeys.indexOf(width);\n  }\n  return breakpointKeys.indexOf(breakpoint) < breakpointKeys.indexOf(width);\n};\n\n// By default, returns true if screen width is the same or less than the given breakpoint.\nexport const isWidthDown = (breakpoint, width, inclusive = false) => {\n  if (inclusive) {\n    return breakpointKeys.indexOf(width) <= breakpointKeys.indexOf(breakpoint);\n  }\n  return breakpointKeys.indexOf(width) < breakpointKeys.indexOf(breakpoint);\n};\nconst withWidth = (options = {}) => Component => {\n  const {\n    withTheme: withThemeOption = false,\n    noSSR = false,\n    initialWidth: initialWidthOption\n  } = options;\n  function WithWidth(props) {\n    const contextTheme = useTheme();\n    const theme = props.theme || contextTheme;\n    const {\n      initialWidth,\n      width,\n      ...other\n    } = getThemeProps({\n      theme,\n      name: 'MuiWithWidth',\n      props\n    });\n    const [mountedState, setMountedState] = React.useState(false);\n    useEnhancedEffect(() => {\n      setMountedState(true);\n    }, []);\n\n    /**\n     * innerWidth |xs      sm      md      lg      xl\n     *            |-------|-------|-------|-------|------>\n     * width      |  xs   |  sm   |  md   |  lg   |  xl\n     */\n    const keys = theme.breakpoints.keys.slice().reverse();\n    const widthComputed = keys.reduce((output, key) => {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const matches = useMediaQuery(theme.breakpoints.up(key));\n      return !output && matches ? key : output;\n    }, null);\n    const more = {\n      width: width || (mountedState || noSSR ? widthComputed : undefined) || initialWidth || initialWidthOption,\n      ...(withThemeOption ? {\n        theme\n      } : {}),\n      ...other\n    };\n\n    // When rendering the component on the server,\n    // we have no idea about the client browser screen width.\n    // In order to prevent blinks and help the reconciliation of the React tree\n    // we are not rendering the child component.\n    //\n    // An alternative is to use the `initialWidth` property.\n    if (more.width === undefined) {\n      return null;\n    }\n    return /*#__PURE__*/_jsx(Component, {\n      ...more\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? WithWidth.propTypes = {\n    /**\n     * As `window.innerWidth` is unavailable on the server,\n     * we default to rendering an empty component during the first mount.\n     * You might want to use a heuristic to approximate\n     * the screen width of the client browser screen width.\n     *\n     * For instance, you could be using the user-agent or the client-hints.\n     * https://caniuse.com/#search=client%20hint\n     */\n    initialWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n    /**\n     * @ignore\n     */\n    theme: PropTypes.object,\n    /**\n     * Bypass the width calculation logic.\n     */\n    width: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])\n  } : void 0;\n  if (process.env.NODE_ENV !== 'production') {\n    WithWidth.displayName = `WithWidth(${getDisplayName(Component)})`;\n  }\n  return WithWidth;\n};\nexport default withWidth;"]},"metadata":{},"sourceType":"module"}