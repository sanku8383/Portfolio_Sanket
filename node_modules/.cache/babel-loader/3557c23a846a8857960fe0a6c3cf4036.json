{"ast":null,"code":"import * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport useButton from '../useButton';\nimport { useListItem } from '../useList';\nimport { useCompoundItem } from '../utils/useCompoundItem';\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuItem API](https://mui.com/base/react-menu/hooks-api/#use-menu-item)\n */\n\nexport default function useMenuItem(params) {\n  const {\n    disabled = false,\n    id: idParam,\n    rootRef: externalRef,\n    label\n  } = params;\n  const id = useId(idParam);\n  const itemRef = React.useRef(null);\n  const itemMetadata = React.useMemo(() => ({\n    disabled,\n    id: id != null ? id : '',\n    label,\n    ref: itemRef\n  }), [disabled, id, label]);\n  const {\n    getRootProps: getListRootProps,\n    highlighted,\n    rootRef: listItemRefHandler\n  } = useListItem({\n    item: id\n  });\n  const {\n    index,\n    totalItemCount\n  } = useCompoundItem(id, itemMetadata);\n  const {\n    getRootProps: getButtonProps,\n    focusVisible,\n    rootRef: buttonRefHandler\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: true\n  });\n  const handleRef = useForkRef(listItemRefHandler, buttonRefHandler, externalRef, itemRef);\n  React.useDebugValue({\n    id,\n    highlighted,\n    disabled,\n    label\n  }); // If `id` is undefined (during SSR in React < 18), we fall back to rendering a simplified menu item\n  // which does not have access to infortmation about its position or highlighted state.\n\n  if (id === undefined) {\n    return {\n      getRootProps: function () {\n        let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return { ...otherHandlers,\n          ...getButtonProps(otherHandlers),\n          role: 'menuitem'\n        };\n      },\n      disabled: false,\n      focusVisible,\n      highlighted: false,\n      index: -1,\n      totalItemCount: 0,\n      rootRef: handleRef\n    };\n  }\n\n  const getRootProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const resolvedButtonProps = { ...otherHandlers,\n      ...getButtonProps(otherHandlers)\n    };\n    const resolvedMenuItemProps = { ...resolvedButtonProps,\n      ...getListRootProps(resolvedButtonProps)\n    };\n    return { ...otherHandlers,\n      ...resolvedButtonProps,\n      ...resolvedMenuItemProps,\n      role: 'menuitem',\n      ref: handleRef\n    };\n  };\n\n  return {\n    getRootProps,\n    disabled,\n    focusVisible,\n    highlighted,\n    index,\n    totalItemCount,\n    rootRef: handleRef\n  };\n}","map":{"version":3,"sources":["C:/React/Portfolio/Portfolio-Youtube/node_modules/@mui/base/useMenuItem/useMenuItem.js"],"names":["React","unstable_useId","useId","unstable_useForkRef","useForkRef","useButton","useListItem","useCompoundItem","useMenuItem","params","disabled","id","idParam","rootRef","externalRef","label","itemRef","useRef","itemMetadata","useMemo","ref","getRootProps","getListRootProps","highlighted","listItemRefHandler","item","index","totalItemCount","getButtonProps","focusVisible","buttonRefHandler","focusableWhenDisabled","handleRef","useDebugValue","undefined","otherHandlers","role","resolvedButtonProps","resolvedMenuItemProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport useButton from '../useButton';\nimport { useListItem } from '../useList';\nimport { useCompoundItem } from '../utils/useCompoundItem';\n\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuItem API](https://mui.com/base/react-menu/hooks-api/#use-menu-item)\n */\nexport default function useMenuItem(params) {\n  const {\n    disabled = false,\n    id: idParam,\n    rootRef: externalRef,\n    label\n  } = params;\n  const id = useId(idParam);\n  const itemRef = React.useRef(null);\n  const itemMetadata = React.useMemo(() => ({\n    disabled,\n    id: id != null ? id : '',\n    label,\n    ref: itemRef\n  }), [disabled, id, label]);\n  const {\n    getRootProps: getListRootProps,\n    highlighted,\n    rootRef: listItemRefHandler\n  } = useListItem({\n    item: id\n  });\n  const {\n    index,\n    totalItemCount\n  } = useCompoundItem(id, itemMetadata);\n  const {\n    getRootProps: getButtonProps,\n    focusVisible,\n    rootRef: buttonRefHandler\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: true\n  });\n  const handleRef = useForkRef(listItemRefHandler, buttonRefHandler, externalRef, itemRef);\n  React.useDebugValue({\n    id,\n    highlighted,\n    disabled,\n    label\n  });\n\n  // If `id` is undefined (during SSR in React < 18), we fall back to rendering a simplified menu item\n  // which does not have access to infortmation about its position or highlighted state.\n  if (id === undefined) {\n    return {\n      getRootProps: (otherHandlers = {}) => ({\n        ...otherHandlers,\n        ...getButtonProps(otherHandlers),\n        role: 'menuitem'\n      }),\n      disabled: false,\n      focusVisible,\n      highlighted: false,\n      index: -1,\n      totalItemCount: 0,\n      rootRef: handleRef\n    };\n  }\n  const getRootProps = (otherHandlers = {}) => {\n    const resolvedButtonProps = {\n      ...otherHandlers,\n      ...getButtonProps(otherHandlers)\n    };\n    const resolvedMenuItemProps = {\n      ...resolvedButtonProps,\n      ...getListRootProps(resolvedButtonProps)\n    };\n    return {\n      ...otherHandlers,\n      ...resolvedButtonProps,\n      ...resolvedMenuItemProps,\n      role: 'menuitem',\n      ref: handleRef\n    };\n  };\n  return {\n    getRootProps,\n    disabled,\n    focusVisible,\n    highlighted,\n    index,\n    totalItemCount,\n    rootRef: handleRef\n  };\n}"]},"metadata":{},"sourceType":"module"}