{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport composeClasses from '../composeClasses';\nimport { getTabUtilityClass } from './tabClasses';\nimport useTab from '../useTab';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    selected,\n    disabled\n  } = ownerState;\n  const slots = {\n    root: ['root', selected && 'selected', disabled && 'disabled']\n  };\n  return composeClasses(slots, useClassNamesOverride(getTabUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base/react-tabs/)\n *\n * API:\n *\n * - [Tab API](https://mui.com/base/react-tabs/components-api/#tab)\n */\n\n\nconst Tab = /*#__PURE__*/React.forwardRef(function Tab(props, forwardedRef) {\n  var _slots$root;\n\n  const {\n    action,\n    children,\n    value: valueProp,\n    disabled = false,\n    onChange,\n    onClick,\n    onFocus,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const tabRef = React.useRef();\n  const handleRef = useForkRef(tabRef, forwardedRef);\n  const {\n    active,\n    highlighted,\n    selected,\n    getRootProps\n  } = useTab({ ...props,\n    rootRef: handleRef\n  });\n  const ownerState = { ...props,\n    active,\n    disabled,\n    highlighted,\n    selected\n  };\n  const classes = useUtilityClasses(ownerState);\n  const TabRoot = (_slots$root = slots.root) != null ? _slots$root : 'button';\n  const tabRootProps = useSlotProps({\n    elementType: TabRoot,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  return /*#__PURE__*/_jsx(TabRoot, { ...tabRootProps,\n    children: children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Tab.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A ref for imperative actions. It currently only supports `focusVisible()` action.\n   */\n  action: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      focusVisible: PropTypes.func.isRequired\n    })\n  })]),\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Callback invoked when new value is being set.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The props used for each slot inside the Tab.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the Tab.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n\n  /**\n   * You can provide your own value. Otherwise, it falls back to the child position index.\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : void 0;\nexport default Tab;","map":{"version":3,"sources":["C:/React/Portfolio/Portfolio-Youtube/node_modules/@mui/base/Tab/Tab.js"],"names":["React","PropTypes","unstable_useForkRef","useForkRef","composeClasses","getTabUtilityClass","useTab","useSlotProps","useClassNamesOverride","jsx","_jsx","useUtilityClasses","ownerState","selected","disabled","slots","root","Tab","forwardRef","props","forwardedRef","_slots$root","action","children","value","valueProp","onChange","onClick","onFocus","slotProps","other","tabRef","useRef","handleRef","active","highlighted","getRootProps","rootRef","classes","TabRoot","tabRootProps","elementType","getSlotProps","externalSlotProps","externalForwardedProps","additionalProps","ref","className","process","env","NODE_ENV","propTypes","oneOfType","func","shape","current","focusVisible","isRequired","node","bool","object","number","string"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport composeClasses from '../composeClasses';\nimport { getTabUtilityClass } from './tabClasses';\nimport useTab from '../useTab';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    selected,\n    disabled\n  } = ownerState;\n  const slots = {\n    root: ['root', selected && 'selected', disabled && 'disabled']\n  };\n  return composeClasses(slots, useClassNamesOverride(getTabUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base/react-tabs/)\n *\n * API:\n *\n * - [Tab API](https://mui.com/base/react-tabs/components-api/#tab)\n */\nconst Tab = /*#__PURE__*/React.forwardRef(function Tab(props, forwardedRef) {\n  var _slots$root;\n  const {\n    action,\n    children,\n    value: valueProp,\n    disabled = false,\n    onChange,\n    onClick,\n    onFocus,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const tabRef = React.useRef();\n  const handleRef = useForkRef(tabRef, forwardedRef);\n  const {\n    active,\n    highlighted,\n    selected,\n    getRootProps\n  } = useTab({\n    ...props,\n    rootRef: handleRef\n  });\n  const ownerState = {\n    ...props,\n    active,\n    disabled,\n    highlighted,\n    selected\n  };\n  const classes = useUtilityClasses(ownerState);\n  const TabRoot = (_slots$root = slots.root) != null ? _slots$root : 'button';\n  const tabRootProps = useSlotProps({\n    elementType: TabRoot,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  return /*#__PURE__*/_jsx(TabRoot, {\n    ...tabRootProps,\n    children: children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Tab.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * A ref for imperative actions. It currently only supports `focusVisible()` action.\n   */\n  action: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      focusVisible: PropTypes.func.isRequired\n    })\n  })]),\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Callback invoked when new value is being set.\n   */\n  onChange: PropTypes.func,\n  /**\n   * The props used for each slot inside the Tab.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Tab.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\n   * You can provide your own value. Otherwise, it falls back to the child position index.\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : void 0;\nexport default Tab;"]},"metadata":{},"sourceType":"module"}