{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { getMenuItemUtilityClass } from './menuItemClasses';\nimport useMenuItem from '../useMenuItem';\nimport composeClasses from '../composeClasses';\nimport useSlotProps from '../utils/useSlotProps';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction useUtilityClasses(ownerState) {\n  const {\n    disabled,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible']\n  };\n  return composeClasses(slots, useClassNamesOverride(getMenuItemUtilityClass));\n}\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base/react-menu/)\n *\n * API:\n *\n * - [MenuItem API](https://mui.com/base/react-menu/components-api/#menu-item)\n */\n\n\nconst MenuItem = /*#__PURE__*/React.forwardRef(function MenuItem(props, forwardedRef) {\n  var _slots$root;\n\n  const {\n    children,\n    disabled: disabledProp = false,\n    label,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const {\n    getRootProps,\n    disabled,\n    focusVisible,\n    highlighted\n  } = useMenuItem({\n    disabled: disabledProp,\n    rootRef: forwardedRef,\n    label\n  });\n  const ownerState = { ...props,\n    disabled,\n    focusVisible,\n    highlighted\n  };\n  const classes = useUtilityClasses(ownerState);\n  const Root = (_slots$root = slots.root) != null ? _slots$root : 'li';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    className: classes.root,\n    ownerState\n  });\n  return /*#__PURE__*/_jsx(Root, { ...rootProps,\n    children: children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? MenuItem.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * A text representation of the menu item's content.\n   * Used for keyboard text navigation matching.\n   */\n  label: PropTypes.string,\n\n  /**\n   * The props used for each slot inside the MenuItem.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the MenuItem.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport default MenuItem;","map":{"version":3,"sources":["C:/React/Portfolio/Portfolio-Youtube/node_modules/@mui/base/MenuItem/MenuItem.js"],"names":["React","PropTypes","getMenuItemUtilityClass","useMenuItem","composeClasses","useSlotProps","useClassNamesOverride","jsx","_jsx","useUtilityClasses","ownerState","disabled","focusVisible","slots","root","MenuItem","forwardRef","props","forwardedRef","_slots$root","children","disabledProp","label","slotProps","other","getRootProps","highlighted","rootRef","classes","Root","rootProps","elementType","getSlotProps","externalSlotProps","externalForwardedProps","className","process","env","NODE_ENV","propTypes","node","bool","string","shape","oneOfType","func","object"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { getMenuItemUtilityClass } from './menuItemClasses';\nimport useMenuItem from '../useMenuItem';\nimport composeClasses from '../composeClasses';\nimport useSlotProps from '../utils/useSlotProps';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction useUtilityClasses(ownerState) {\n  const {\n    disabled,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible']\n  };\n  return composeClasses(slots, useClassNamesOverride(getMenuItemUtilityClass));\n}\n\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base/react-menu/)\n *\n * API:\n *\n * - [MenuItem API](https://mui.com/base/react-menu/components-api/#menu-item)\n */\nconst MenuItem = /*#__PURE__*/React.forwardRef(function MenuItem(props, forwardedRef) {\n  var _slots$root;\n  const {\n    children,\n    disabled: disabledProp = false,\n    label,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const {\n    getRootProps,\n    disabled,\n    focusVisible,\n    highlighted\n  } = useMenuItem({\n    disabled: disabledProp,\n    rootRef: forwardedRef,\n    label\n  });\n  const ownerState = {\n    ...props,\n    disabled,\n    focusVisible,\n    highlighted\n  };\n  const classes = useUtilityClasses(ownerState);\n  const Root = (_slots$root = slots.root) != null ? _slots$root : 'li';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    className: classes.root,\n    ownerState\n  });\n  return /*#__PURE__*/_jsx(Root, {\n    ...rootProps,\n    children: children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? MenuItem.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  disabled: PropTypes.bool,\n  /**\n   * A text representation of the menu item's content.\n   * Used for keyboard text navigation matching.\n   */\n  label: PropTypes.string,\n  /**\n   * The props used for each slot inside the MenuItem.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the MenuItem.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport default MenuItem;"]},"metadata":{},"sourceType":"module"}